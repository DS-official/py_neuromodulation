from time import time

from numpy import concatenate
from numpy import round as np_round
from pandas import DataFrame

import realtime_normalization
import rereference


def run(gen, features, settings, ref_here, used, resample_=None):
    """Run "real-time" analysis of neurophysiological data generated by "gen".

    Parameters
    ----------
    gen : generator object
        generator that yields segments of data.
    features :
        Feature_df object (needs to be initialized beforehand)
    settings : dict
        dictionary of settings such as "seglengths" or "frequencyranges"
    ref_here :
        Rereference object (needs to be initialized beforehand)
    used : array
        Used channels (as specified in M1.tsv)
    resample_ :
        Resample object (needs to be initialized beforehand
    Returns
    -------
    features (df) : features defined as in settings in shape [M, N] where N is the time index and
                    M is the total feature number
    """

    fs_new = int(settings["sampling_rate_features"])
    normalize_time = int(settings["normalization_settings"]["normalization_time"])
    offset = max([value[1] for value in settings[
        "bandpass_filter_settings"]["frequency_ranges"].values()])  # ms
    cnt_samples = 0

    if settings["methods"]["normalization"] is True:
        normalize_samples = int(normalize_time * features.fs)  # normalization is here made for the raw signal
        feature_arr = DataFrame()

    while True:
        ieeg_batch = next(gen, None)
        start_time = time()
        if ieeg_batch is None:
            return feature_arr

        # call rereference
        if settings["methods"]["re_referencing"] is True:
            ieeg_batch = ref_here.rereference(ieeg_batch)
        ieeg_batch = ieeg_batch[used, :]
        print("shape: ", ieeg_batch.shape)

        # resample
        if settings["methods"]["resample_raw"] is True:
            ieeg_batch = resample_.resample_raw(ieeg_batch)

        # normalize (rereferenced) data
        if settings["methods"]["normalization"] is True:
            if cnt_samples == 0:
                raw_arr = ieeg_batch
            else:
                raw_arr = concatenate((raw_arr, ieeg_batch), axis=1)

            raw_norm = \
                realtime_normalization.realtime_normalization(
                    raw_arr, cnt_samples, normalize_samples, features.fs,
                    settings["normalization_settings"]["normalization_method"])

            # calculate features
            feature_series = features.estimate_features(raw_norm)
        else:
            feature_series = features.estimate_features(ieeg_batch)

        if cnt_samples == 0:
            cnt_samples += int(features.fs)
            feature_series["time"] = offset  # ms
            feature_arr = DataFrame([feature_series])

        else:
            cnt_samples += int(features.fs / fs_new)
            feature_series["time"] = cnt_samples * 1000 / features.fs  # ms
            feature_arr = feature_arr.append(feature_series, ignore_index=True)
        print(str(np_round(feature_series["time"] / 1000, 2))
              + ' seconds of data processed')
        print("took: " + str(np_round(time() - start_time, 2)) + " seconds")

from time import time
from numpy import concatenate, squeeze, vstack, expand_dims
from numpy import round as np_round
from pandas import DataFrame, Series
import realtime_normalization
import projection

def run(gen, features, settings, ref_here, projection=None, resample_=None, client=None):
    """Run "real-time" analysis of neurophysiological data generated by "gen".

    Parameters
    ----------
    gen : generator object
        generator that yields segments of data.
    features :
        Feature_df object (needs to be initialized beforehand)
    settings : dict
        dictionary of settings such as "seglengths" or "frequencyranges"
    ref_here :
        Rereference object (needs to be initialized beforehand)
    projection : 
        projection object (needs to be initialized beforehand)
    resample_ :
        Resample object (needs to be initialized beforehand
    client : 
        MNE RealTime LSL client
    Returns
    -------
    features (df) : features defined as in settings in shape [M, N] where N is the time index and
                    M is the total feature number
    """

    fs_new = int(settings["sampling_rate_features"])
    normalize_time = int(settings["normalization_settings"]["normalization_time"])
    offset = max([value[1] for value in settings[
        "bandpass_filter_settings"]["frequency_ranges"].values()])  # ms
    
    if settings["methods"]["project_cortex"] is True:
        idx_chs_lfp = []  # feature series indexes for dbs-lfp channels
        names_chs_ecog = []  # feature series name of ecog features
        ecog_channels = [settings["ch_names"][ch_idx] for ch_idx, ch in enumerate(settings["ch_types"]) 
                         if ch == "ecog"]
    if settings["methods"]["project_subcortex"] is True:
        idx_chs_ecog = []  # feature series indexes for ecog channels
        names_chs_lfp = []  # feature series name of lfp features
        #  mind here that settings["coord"]["subcortex_left/right"] is based on the "LFP" substring in the channel
        lfp_channels = settings["coord"]["subcortex_right"]["ch_names"] if settings["sess_right"] is True\
                                else settings["coord"]["subcortex_left"]["ch_names"]

    cnt_samples = 0

    if settings["methods"]["normalization"] is True:
        normalize_samples = int(normalize_time * features.fs)  # normalization is here made for the raw signal
        feature_arr = DataFrame()

    while True:
        if client is None:
            ieeg_batch = next(gen, None)
        else:
            ieeg_batch = squeeze(client.get_data_as_epoch(n_samples=int(features.fs)))
        start_time = time()
        if ieeg_batch is None:
            return feature_arr

        # call rereference
        if settings["methods"]["re_referencing"] is True:
            ieeg_batch = ref_here.rereference(ieeg_batch)
        ieeg_batch = ieeg_batch[settings["feature_idx"], :]

        # resample
        if settings["methods"]["resample_raw"] is True:
            ieeg_batch = resample_.resample_raw(ieeg_batch)
        print("batch shape: ", ieeg_batch.shape)

        # normalize (rereferenced) data
        if settings["methods"]["normalization"] is True:
            if cnt_samples == 0:
                raw_arr = ieeg_batch
            else:
                raw_arr = concatenate((raw_arr, ieeg_batch), axis=1)

            raw_norm = \
                realtime_normalization.realtime_normalization(
                    raw_arr, cnt_samples, normalize_samples, features.fs,
                    settings["normalization_settings"]["normalization_method"])

            # calculate features
            feature_series = Series(features.estimate_features(raw_norm))
        else:
            feature_series = Series(features.estimate_features(ieeg_batch))

        if cnt_samples == 0:
            
            cnt_samples += int(features.fs)
            feature_series["time"] = offset  # ms

            #  here it is assumed that only one hemisphere is recorded at a time! 
            if settings["methods"]["project_cortex"] is True:
                for ecog_channel in ecog_channels:
                    idx_chs_ecog.append([ch_idx for ch_idx, ch in enumerate(feature_series.keys())
                                        if ch.startswith(ecog_channel)])
                    names_chs_ecog.append([ch for _, ch in enumerate(feature_series.keys())
                                          if ch.startswith(ecog_channel)])
                dat_cortex = vstack([feature_series.iloc[idx_ch].values for idx_ch in idx_chs_ecog])

            if settings["methods"]["project_subcortex"] is True:
                # for lfp_channels select here only the ones from the correct hemisphere! 
                for lfp_channel in lfp_channels:
                    idx_chs_lfp.append([ch_idx for ch_idx, ch in enumerate(feature_series.keys())
                                        if ch.startswith(lfp_channel)])
                    names_chs_lfp.append([ch for _, ch in enumerate(feature_series.keys())
                                         if ch.startswith(lfp_channel)])
                dat_subcortex = vstack([feature_series.iloc[idx_ch].values for idx_ch in idx_chs_lfp])

            if settings["methods"]["project_cortex"] is True or settings["methods"]["project_subcortex"] is True:
                # project now data
                proj_cortex, proj_subcortex = projection.get_projected_cortex_subcortex_data(dat_cortex, dat_subcortex)
                proj_cortex_array = expand_dims(proj_cortex, axis=0)
                proj_subcortex_array = expand_dims(proj_subcortex, axis=0)
            feature_arr = DataFrame([feature_series])

        else:
            cnt_samples += int(features.fs / fs_new)
            feature_series["time"] = cnt_samples * 1000 / features.fs  # ms
            if settings["methods"]["project_cortex"] is True:
                dat_cortex = vstack([feature_series.iloc[idx_ch].values for idx_ch in idx_chs_ecog])
            if settings["methods"]["project_subcortex"] is True:
                dat_subcortex = vstack([feature_series.iloc[idx_ch].values for idx_ch in idx_chs_lfp])
            if settings["methods"]["project_cortex"] is True or settings["methods"]["project_subcortex"] is True:
                proj_cortex, proj_subcortex = projection.get_projected_cortex_subcortex_data(dat_cortex, dat_subcortex)
                proj_cortex_array = concatenate((proj_cortex_array, expand_dims(proj_cortex, axis=0)), axis=0)
                proj_subcortex_array = concatenate((proj_subcortex_array, expand_dims(proj_subcortex, axis=0)), axis=0)
            feature_arr = feature_arr.append(feature_series, ignore_index=True)
        print(str(np_round(feature_series["time"] / 1000, 2))
              + ' seconds of data processed')
        print("took: " + str(np_round(time() - start_time, 2)) + " seconds")
